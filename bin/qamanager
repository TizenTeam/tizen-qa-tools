#!/usr/bin/node

/* qamanager tool to launch packaged Tizen test suite from a host
 *
 */

// set configuration
var fs      = require('fs');
var path    = require('path');
var restler = require('restler');
var QA      = require('libqa');
var TOPDIR  = path.resolve(path.join(path.dirname(__filename),".."));
var CFGDIR  = path.resolve(path.join(TOPDIR,"etc"));
var config  = new QA.Config(CFGDIR)
var suites  = '' // string that represent the list of the suites to launch
var script  = path.join(TOPDIR, "bin", QA.GLOBALS.local_script)

console.log(config);
console.log(QA);
console.log(script);


// define loggers
var log4js = require('log4js');
logger_qamanager = log4js.getLogger('qamanager');
logger_target = log4js.getLogger('target');
logger_qamanager.setLevel('DEBUG');


// define connection and argument parser objects
var Connection = require('ssh2');
var ArgumentParser = require('argparse').ArgumentParser;


// -------------- arguments validation functions -------------- //
function check_target(target_ip){
	var ipformat = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;
	if (target_ip.match(ipformat)){
		logger_qamanager.info('Target device ip : ' + target_ip);
	}
	else {
		logger_qamanager.error(target_ip + ' is not a valid ip address');
		process.exit(1);
	}
}

function check_suite(suitesobj, suite){
	if (suitesobj.hasOwnProperty(suite)){
		logger_qamanager.info('Suite ' + suite + ' is defined')
	}
	else {
		logger_qamanager.error('Suite ' + suite + ' is not defined !');
		process.exit(1);
	}
}

function check_report(reportsobj, report){
	if (report === null){
		logger_qamanager.info('No report defined !')
	}
	else {
		if (reportsobj.hasOwnProperty(report)){
			logger_qamanager.info('Report ' + report + ' is defined');
		}
		else {
			logger_qamanager.error('Report ' + report + ' is not defined !');
			process.exit(1)
		}
	}
}

// --------------- file transfert functions ------------------ //
function getFile(connect, remote, local, cb){
	connect.sftp(function (err, sftp) {
		if (err) throw err;
		sftp.fastGet(remote, local, {}, function(err) {
			if (err) {
				logger_qamanager.error("cannot upload the result file");
				process.exit(1);
			}
			else{
				logger_qamanager.info("result file successfully uploaded");
			}
			if (cb) cb(err);
		});
	});
}

function putFile(connect, local, remote, mode, cb) {
	connect.sftp(function(err, sftp) {
		if (err) throw err;
		sftp.fastPut(local, remote, {}, function(err) {
			if (err) {
				logger_qamanager.error("cannot push file to the target device");
				process.exit(1);
			}
			else {
				logger_qamanager.info("file successfully uploaded");
			}
			sftp.chmod(remote, mode, function(err) {
				if (err) {
					throw err;
					logger_qamanager.error("cannot set permimission");
				}
				else {
					logger_qamanager.debug("permissions successfully set to file");
				}
			});
			if (cb) cb(err);
		});
	});
}

//---------- get the tizen platform conf -------------///

function getPlatformInfos(tizenconf){
	var content = fs.readFileSync(tizenconf);

	if (!content) {
		logger_qamanager.error("Invalid tizen platform config file : " + tizenconf);
		process.exit(1);
	}
	try {
		content = JSON.parse(content);
	}
	catch(e){
		logger_qamanager.error("Unable to parse config file : " + tizenconf);
		throw e;
		process.exit(1);
	}
	if (typeof content != 'object'){
		logger_qamanager.error("Invalid configuration in " + tizenconf + " (not and object as expected)");
		throw new Error("Invalid configuration "+this.configfile);
		process.exit(1);
	}

	logger_qamanager.info("Successfully parsed tizen platform conf file");

	return content;
}

// ----------- function to send the test report ------------ //
function sendReport(tzplconf, suiteprofilelist, reportprofile, connection) {
	var objectives = "";
	suiteprofilelist.forEach(function (element, index) {
		objectives += "*" + config.PROFILES[element].objective + "\n";
	});
	var reportinfos = {
		build_id: tzplconf.tizenos.build_id,
		build_txt: "[["+ path.join(tzplconf.tizenos.build_snapshot_url, tzplconf.tizenos.build_id, "repos", tzplconf.tizenos.build_repo) + "]]",
		hwproduct: tzplconf.platform.manufacturer + ' ' + tzplconf.platform.model,
		auth_token: reportprofile.auth_token,
		release_version: reportprofile.release_version,
		target: reportprofile.target,
		testtype: "Automated tests",
		title: "Test report - Snapshot : " + tzplconf.tizenos.build_id,
		environment_txt: [
			reportprofile.environment_header,
			"",
			"=== '''Image''' ===",
			"* Snapshot: " + tzplconf.tizenos.build_id,
			"* Buid arch: " + tzplconf.tizenos.build_arch,
			"* Buid repo: " + tzplconf.tizenos.build_repo,
			"* Source: " + "[["+ path.join(tzplconf.tizenos.build_snapshot_url, tzplconf.tizenos.build_id, "repos", tzplconf.tizenos.build_repo) + "]]",
			"",
			"=== '''HW Target''' ===",
			"* CPU: " + tzplconf.platform.cpu,
			"* Manufacturer: " + tzplconf.platform.manufacturer,
			"* Model: " + tzplconf.platform.model,
			"* Version: " + tzplconf.platform.version,
			""
		].filter(function(k){return (k!==null)}).join("\n"),
		objective_txt: objectives,
		qa_summary_txt: "",
		issue_summary_txt: "-",
	};

	var request = restler.post(reportprofile.server + '/api/import' ,
		{
			method: "POST" ,
			multipart: true ,
			query: reportinfos ,
			data: {
				'report.1': restler.file(QA.GLOBALS.local_xmlres, null, fs.statSync(QA.GLOBALS.local_xmlres).size, null, 'application/xml')
			}
		}
	);

	request.on('complete',
		function(result, response){
			if (result instanceof Error){
				logger_qamanager.error("Error : cannot upload the test results to the server")
				process.exit(1);
			}
			if (response.statusCode == 200){
				logger_qamanager.info("Report successfully uploaded");
				logger_qamanager.debug("Status : "+ response.statusCode);
				conn.end();
			}
			else {
				logger_qamanager.error("Bad exit status for upload : " + response.statusCode);
				process.exit(1)
			}
		}
	);
}
// -------------- preparation functions ---------------- //
function create_local_resdir(resdir){
	if (! fs.existsSync(resdir)){
		fs.mkdirSync(resdir);
		logger_qamanager.info("result directory succressfully created : " + resdir);
	}
	else {
		logger_qamanager.info("result directory already exists : " + resdir);
	}
}

function clean_directory(resdir){
	logger_qamanager.info("cleaning result directory");
	if (fs.existsSync(resdir)){
		fs.readdirSync(resdir).forEach(function(file, index){	
			var currentPath = path.join(resdir, file);
			if (fs.lstatSync(currentPath).isDirectory()){
				clean_directory(currentPath);
			}
			else {
				fs.unlinkSync(currentPath);
			}
		});
	}
}


var parser = new ArgumentParser({
    version: '1.0.0',
    addHelp: true,
    description: 'Tool to launch packaged test suites on a Tizen Profile'
});

parser.addArgument(
    ['-t', '--target'],
    {
	help: 'IP address of the target device to test',
	dest: 'target',
	required: true
    }
);

parser.addArgument(
    ['-s', '--suite'],
    {
	help: 'Test suites to launch',
	nargs: '+',
	dest: 'suite'
    }
);

parser.addArgument(
    ['-r', '--report'],
    {
	help: 'Type of reporting (declared in etc/test_reports.conf)',
	dest: 'report'
    }
);


var args = parser.parseArgs();
console.log(args);

// create the result directory
create_local_resdir(path.dirname(QA.GLOBALS.local_txtres));

// clean the result directory
clean_directory(path.dirname(QA.GLOBALS.local_txtres));


// checking consistency of the given arguments
check_target(args.target);
args.suite.forEach(function (element, index, array){
	check_suite(config.PROFILES, element);
	suites += ' ' + config.PROFILES[element].name
});
check_report(config.REPORTS, args.report)


// connection and credential objects
conn = new Connection();
conn_data = {
	host: args.target,
	port: QA.GLOBALS.default_port,
	username: QA.GLOBALS.default_user,
	privateKey: fs.readFileSync(path.resolve(CFGDIR, QA.GLOBALS.default_key))
};

// commands to launch on the target device
CMD_INSTALL = 'zypper -n in dmidecode' + suites;
CMD_LAUNCH  = 'common-suite-launcher launch --suites' + suites;


conn.on('ready', function() {

	logger_qamanager.debug('Connection to target :: ready');
	putFile(conn, script, QA.GLOBALS.remote_script, "700");
	logger_qamanager.info('Installing required test suites : ' + suites);
	conn.exec(CMD_INSTALL, function(err, stream) {
		if (err) throw err;
		stream.on('exit', function(code, signal) {
			if(code === 0){
				logger_target.debug('Installation succeeded');
				logger_target.info('Launching the test suites');
				conn.exec(CMD_LAUNCH, function(err, stream) {
        			if (err) throw err;
        			stream.on('exit', function(code, signal) {
            			if (code === 0) {
                			logger_target.debug('Test suites successfully executed');
							var ndl = 2;
							function dlend_cb(err) {
								ndl--;
								if (ndl == 0){
									conn.exec(QA.GLOBALS.remote_script, function(err, stream) {
										if (err) throw err;
										stream.on('exit', function (code, signal) {
											if (code == 0) {
												logger_target.debug('remote script successfully executed');
											}
											else {
												 logger_target.error('Cannot execute the tests');
												 logger_target.error('Exit code: ' + code + ', Signal: ' + signal);
												 conn.end();
												 process.exit(1);
											}
										}).on('data', function(data) {
											//logger_qamanager.debug((''+data).replace('\n',''));
											fs.writeFile(QA.GLOBALS.local_tzplconf, data, null, function(err) {
												if (err) throw err;
												platformconf = getPlatformInfos(QA.GLOBALS.local_tzplconf);
												console.log (platformconf);
												sendReport(platformconf, args.suite, config.REPORTS[args.report], conn);
											});
										}).stderr.on('data', function (data) {
											logger_target.error((''+data).replace('\n',''));
										});
									});
								}
							}
							getFile(conn, QA.GLOBALS.remote_txtres, QA.GLOBALS.local_txtres, dlend_cb);
							getFile(conn, QA.GLOBALS.remote_xmlres, QA.GLOBALS.local_xmlres, dlend_cb);
						}
            			else{
                			logger_target.error('Cannot execute the tests');
                			logger_target.error('Exit code: ' + code + ', Signal: ' + signal);
							conn.end();
							process.exit(1)
            			}
        			}).on('data', function(data) {
            			logger_target.info((''+data).replace('\n',''));
            		}).stderr.on('data', function(data) {
                		logger_target.error(''+data).replace('\n','');
        			});
				});
			}
			else {
				logger_target.error('Cannot install the test suites packages !');
				logger_target.error('Exit code: ' + code + ', Signal: ' + signal);
				conn.end();
				process.exit(1);
			}
		}).on('data', function(data) {
			logger_target.info((''+data).replace('\n',''));
		}).stderr.on('data', function(data) {
			logger_target.error(''+data).replace('\n','');
		});
    });
});

conn.connect(conn_data);
